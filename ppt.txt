#pragma once

#include <stdio.h>
#include <mutex>
#include <ctime>
#include <Windows.h> // Include Windows API header

enum LogPriority
{
    TracePriority, DebugPriority, InfoPriority, WarnPriority, ErrorPriority, CriticalPriority
};

class Logger
{
private:
    LogPriority priority = InfoPriority;
    std::mutex log_mutex;
    wchar_t* filepath = nullptr;
    FILE* file = nullptr;
    bool logging_enabled = true; // Flag to enable or disable logging

public:
    Logger()
    {
        // Initialize the log file path and logging enabled flag from registry
        filepath = L"log.txt"; // Default file path
        read_registry_settings();
    }

    static void SetPriority(LogPriority new_priority)
    {
        get_instance().priority = new_priority;
    }

    static void EnableFileOutput()
    {
        Logger& logger_instance = get_instance();
        if (logger_instance.logging_enabled)
        {
            logger_instance.enable_file_output();
        }
    }

    static void EnableFileOutput(const wchar_t* new_filepath)
    {
        Logger& logger_instance = get_instance();
        if (logger_instance.logging_enabled)
        {
            logger_instance.filepath = _wcsdup(new_filepath);
            logger_instance.enable_file_output();
        }
    }

    template<typename... Args>
    static void Trace(const char* message, Args... args)
    {
        get_instance().log("[Trace]\t", TracePriority, message, args...);
    }

    template<typename... Args>
    static void Debug(const char* message, Args... args)
    {
        get_instance().log("[Debug]\t", DebugPriority, message, args...);
    }

    template<typename... Args>
    static void Info(const char* message, Args... args)
    {
        get_instance().log("[Info]\t", InfoPriority, message, args...);
    }

    template<typename... Args>
    static void Warn(const char* message, Args... args)
    {
        get_instance().log("[Warn]\t", WarnPriority, message, args...);
    }

    template<typename... Args>
    static void Error(const char* message, Args... args)
    {
        get_instance().log("[Error]\t", ErrorPriority, message, args...);
    }

    template<typename... Args>
    static void Critical(const char* message, Args... args)
    {
        get_instance().log("[Critical]\t", CriticalPriority, message, args...);
    }

private:
    ~Logger()
    {
        free_file();
    }

    static Logger& get_instance()
    {
        static Logger logger;
        return logger;
    }

    template<typename... Args>
    void log(const char* message_priority_str, LogPriority message_priority, const char* message, Args... args)
    {
        if (priority <= message_priority && logging_enabled)
        {
            std::time_t current_time = std::time(0);
            std::tm* timestamp = std::localtime(&current_time);
            char buffer[80];
            strftime(buffer, 80, "%c", timestamp);

            std::scoped_lock lock(log_mutex);
            printf("%s\t", buffer);
            printf(message_priority_str);
            printf(message, args...);
            printf("\n");

            if (file)
            {
                fprintf(file, "%s\t", buffer);
                fprintf(file, message_priority_str);
                fprintf(file, message, args...);
                fprintf(file, "\n");
                fflush(file);  // Ensure the data is written to the file
            }
        }
    }

    void enable_file_output()
    {
        std::scoped_lock lock(log_mutex);

        if (file != nullptr)
        {
            fclose(file);
        }

        file = _wfopen(filepath, L"w");  // Open the file in write mode

        if (file == nullptr)
        {
            printf("Logger: Failed to open file at %ls\n", filepath);
        }
        else
        {
            printf("Logger: Successfully opened file at %ls\n", filepath);
        }
    }

    void free_file()
    {
        std::scoped_lock lock(log_mutex);

        if (file != nullptr)
        {
            fclose(file);
            file = nullptr;
        }

        if (filepath != nullptr)
        {
            free(filepath);
            filepath = nullptr;
        }
    }

    void read_registry_settings()
    {
        HKEY hKey;
        LSTATUS status = RegOpenKeyExW(HKEY_CURRENT_USER, L"SOFTWARE\\MyCompany\\MyProgram", 0, KEY_READ, &hKey);
        if (status == ERROR_SUCCESS)
        {
            // Read LogFilePath
            wchar_t value[MAX_PATH];
            DWORD value_length = sizeof(value);
            DWORD type = REG_SZ;
            status = RegQueryValueExW(hKey, L"LogFilePath", NULL, &type, reinterpret_cast<BYTE*>(value), &value_length);
            if (status == ERROR_SUCCESS)
            {
                // Set the log file path
                filepath = _wcsdup(value); // Duplicate the string, as we need to manage the memory ourselves
                printf("Logger: Log file path set to %ls\n", filepath);
            }
            else
            {
                printf("Logger: Failed to read LogFilePath registry value\n");
                // Default file path, if needed
                filepath = _wcsdup(L"log.txt");
            }

            // Read LoggingEnabled
            DWORD enabled = 0;
            value_length = sizeof(enabled);
            type = REG_DWORD;
            status = RegQueryValueExW(hKey, L"LoggingEnabled", NULL, &type, reinterpret_cast<BYTE*>(&enabled), &value_length);
            if (status == ERROR_SUCCESS)
            {
                logging_enabled = (enabled != 0);
                printf("Logger: Logging enabled set to %s\n", logging_enabled ? "true" : "false");
            }
            else
            {
                printf("Logger: Failed to read LoggingEnabled registry value\n");
                logging_enabled = true; // Default to true
            }

            RegCloseKey(hKey);
        }
        else
        {
            printf("Logger: Failed to open registry key\n");
            // Default values, if needed
            filepath = _wcsdup(L"log.txt");
            logging_enabled = true;
        }
    }
};
